// 短网址生成器 - Cloudflare Workers 完整版（基于 PHP 逻辑，美化版）
// BASE_URL 通过环境变量设置：在 Worker Settings > Variables > Environment Variables 添加 Name: BASE_URL, Value: https://url.hokegamingop.eu.org/
export default {
  async fetch(request, env, ctx) {
    if (!env.DB) {
      return new Response('数据库未绑定！请在 Settings > Variables > D1 Bindings 添加 "DB" 到 shorturl-db。', { status: 500 });
    }

    const baseUrl = env.BASE_URL || 'https://short-url-worker.youraccount.workers.dev/';  // 默认 fallback

    const url = new URL(request.url);
    const path = url.pathname.slice(1);

    // 短码重定向
    if (path && path !== '' && !path.endsWith('.html')) {
      try {
        const { results } = await env.DB.prepare('SELECT long_url FROM short_urls WHERE short_code = ?').bind(path).all();
        if (results.length > 0) {
          await env.DB.prepare('UPDATE short_urls SET clicks = clicks + 1 WHERE short_code = ?').bind(path).run();
          return Response.redirect(results[0].long_url, 301);
        }
        return new Response(html404(baseUrl), { status: 404 });
      } catch (e) {
        console.error('Redirect error:', e);
        return new Response(html404(baseUrl), { status: 500 });
      }
    }

    // POST 生成短码
    if (request.method === 'POST') {
      const formData = await request.formData();
      let longUrl = formData.get('url')?.trim() || '';
      let customCode = formData.get('custom_code')?.trim() || '';

      if (!longUrl) return htmlResponse('请输入长网址', false, '', baseUrl);

      if (!longUrl.startsWith('http')) longUrl = 'http://' + longUrl;

      try {
        new URL(longUrl);
      } catch {
        return htmlResponse('URL 格式无效', false, '', baseUrl);
      }

      try {
        const { results: existing } = await env.DB.prepare('SELECT short_code FROM short_urls WHERE long_url = ?').bind(longUrl).all();
        if (existing.length > 0) {
          return htmlResponse('已存在短码', true, baseUrl + existing[0].short_code, baseUrl);
        }

        let shortCode;
        if (customCode) {
          if (!/^[a-zA-Z0-9]{1,10}$/.test(customCode)) {
            return htmlResponse('短码格式错误：字母数字，1-10位', false, '', baseUrl);
          }
          if (await codeExists(env.DB, customCode)) {
            return htmlResponse('短码已存在', false, '', baseUrl);
          }
          shortCode = customCode;
        } else {
          shortCode = generateShortCode(longUrl);
          let attempts = 0;
          while (await codeExists(env.DB, shortCode) && attempts < 5) {
            shortCode = generateShortCode(longUrl + attempts);
            attempts++;
          }
          if (await codeExists(env.DB, shortCode)) {
            return htmlResponse('生成失败，重试或用自定义码', false, '', baseUrl);
          }
        }

        await env.DB.prepare('INSERT INTO short_urls (long_url, short_code) VALUES (?, ?)').bind(longUrl, shortCode).run();
        return htmlResponse('生成成功！', true, baseUrl + shortCode, baseUrl);
      } catch (e) {
        console.error('POST error:', e);
        return htmlResponse('服务器错误: ' + e.message, false, '', baseUrl);
      }
    }

    // GET 首页
    return new Response(htmlPage('', false, '', baseUrl), {
      headers: { 'Content-Type': 'text/html;charset=UTF-8' },
    });
  },
};

// 生成短码（模拟 PHP crc32）
function generateShortCode(url) {
  let hash = 0;
  for (let i = 0; i < url.length; i++) {
    const char = url.charCodeAt(i);
    hash = ((hash << 5) - hash + char) | 0;
  }
  hash = Math.abs(hash);
  const chars = '0123456789abcdefghijklmnopqrstuvwxyz';
  let code = '';
  for (let i = 0; i < 6; i++) {
    code = chars[hash % 36] + code;
    hash = Math.floor(hash / 36);
  }
  return code.padStart(6, '0');
}

// 检查短码是否存在
async function codeExists(db, code) {
  const { results } = await db.prepare('SELECT 1 FROM short_urls WHERE short_code = ?').bind(code).all();
  return results.length > 0;
}

// 404 页面
function html404(baseUrl) {
  return `<!DOCTYPE html><html lang="zh-CN"><head><title>404</title><style>*{margin:0;padding:0;box-sizing:border-box;font-family:system-ui,sans-serif;}body{background:#f5f7fa;padding:50px;text-align:center;color:#2c3e50;}h1{font-size:4em;margin-bottom:20px;}</style></head><body><h1>404</h1><p>短网址未找到</p><a href="${baseUrl}">返回首页</a></body></html>`;
}

// 响应页面
function htmlResponse(message, isSuccess, shortUrl, baseUrl) {
  const cls = isSuccess ? 'success' : 'error';
  const result = shortUrl ? `<div class="result"><strong>短网址</strong><div class="short-url" style="word-break:break-all;margin:5px 0;color:#3498db;">${shortUrl}</div><button class="copy-btn" data-url="${shortUrl}" style="background:#27ae60;margin-top:8px;padding:6px 10px;font-size:12px;width:auto;border:none;color:white;border-radius:4px;cursor:pointer;transition: all 0.3s;">复制</button></div>` : '';
  return new Response(htmlPage(message, cls, result, baseUrl), { headers: { 'Content-Type': 'text/html;charset=UTF-8' } });
}

// 主 HTML 页面（添加背景图片 + 按钮动画 + 复制成功反馈）
function htmlPage(message, cls, result, baseUrl) {
  return `<!DOCTYPE html>
  <html lang="zh-CN">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>短网址生成器</title>
    <style>
      * { margin: 0; padding: 0; box-sizing: border-box; font-family: system-ui, sans-serif; }
      body { 
        background-image: url('https://images.unsplash.com/photo-1506905925346-21bda4d32df4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80'); 
        background-size: cover; 
        background-position: center; 
        background-attachment: fixed; 
        padding: 20px; 
        min-height: 100vh; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
      }
      .container { background: rgba(255, 255, 255, 0.95); padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 480px; width: 100%; backdrop-filter: blur(10px); }
      h1 { text-align: center; margin-bottom: 20px; color: #2c3e50; }
      .message { padding: 10px; margin-bottom: 15px; border-radius: 4px; text-align: center; }
      .success { background: #d4edda; color: #155724; }
      .error { background: #f8d7da; color: #721c24; }
      .form-group { margin-bottom: 15px; }
      label { display: block; margin-bottom: 5px; font-weight: 500; }
      input { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
      input:focus { outline: none; border-color: #3498db; }
      small { color: #666; font-size: 12px; margin-top: 3px; }
      button { 
        width: 100%; 
        background: #3498db; 
        color: white; 
        border: none; 
        padding: 10px; 
        border-radius: 4px; 
        font-size: 14px; 
        cursor: pointer; 
        transition: all 0.3s ease; 
        position: relative; 
        overflow: hidden;
      }
      button:hover { 
        background: #2980b9; 
        transform: scale(1.02); 
        box-shadow: 0 4px 8px rgba(52, 152, 219, 0.3);
      }
      button:active { transform: scale(0.98); }
      button.loading::after {
        content: ''; 
        position: absolute; 
        width: 16px; 
        height: 16px; 
        top: 50%; 
        left: 50%; 
        margin-left: -8px; 
        margin-top: -8px; 
        border: 2px solid transparent; 
        border-top-color: white; 
        border-radius: 50%; 
        animation: spin 1s linear infinite;
      }
      @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
      .result { margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 4px; }
      .copy-btn { 
        background: #27ae60; 
        margin-top: 8px; 
        padding: 6px 10px; 
        font-size: 12px; 
        width: auto; 
        border: none; 
        color: white; 
        border-radius: 4px; 
        cursor: pointer; 
        transition: all 0.3s ease; 
      }
      .copy-btn:hover { background: #219a52; transform: scale(1.05); }
      .copy-btn.success { 
        background: #28a745 !important; 
        transform: scale(1.05); 
        box-shadow: 0 2px 4px rgba(40, 167, 69, 0.3);
      }
      .short-url { word-break: break-all; margin: 5px 0; color: #3498db; }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>短网址生成器</h1>
      ${message ? `<div class="message ${cls}">${message}</div>` : ''}
      <form method="POST" id="shortForm">
        <div class="form-group">
          <label for="url">长网址</label>
          <input type="url" name="url" placeholder="https://example.com" required>
        </div>
        <div class="form-group">
          <label for="custom_code">自定义短码（可选）</label>
          <input type="text" name="custom_code" placeholder="myurl" maxlength="10">
          <small>字母数字，1-10位</small>
        </div>
        <button type="submit" id="generateBtn">生成短网址</button>
      </form>
      ${result}
    </div>
    <script>
      const form = document.getElementById('shortForm');
      const btn = document.getElementById('generateBtn');
      if (form && btn) {
        form.addEventListener('submit', function(e) {
          btn.textContent = '生成中...';
          btn.classList.add('loading');
          btn.disabled = true;
        });
      }

      function initCopyButtons() {
        document.querySelectorAll('.copy-btn').forEach(btn => {
          if (btn.onclick) return;  // 避免重复绑定
          btn.addEventListener('click', function(e) {
            e.preventDefault();
            const text = this.dataset.url;
            if (!text) return;
            navigator.clipboard.writeText(text.trim()).then(() => {
              this.textContent = '已复制到剪贴板';
              this.classList.add('success');
              setTimeout(() => {
                this.textContent = '复制';
                this.classList.remove('success');
              }, 1500);
            }).catch(() => {
              const ta = document.createElement('textarea');
              ta.value = text.trim();
              ta.style.position = 'fixed';
              ta.style.opacity = '0';
              document.body.appendChild(ta);
              ta.select();
              document.execCommand('copy');
              document.body.removeChild(ta);
              this.textContent = '已复制到剪贴板';
              this.classList.add('success');
              setTimeout(() => {
                this.textContent = '复制';
                this.classList.remove('success');
              }, 1500);
            });
          });
        });
      }

      // 初始化复制按钮
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initCopyButtons);
      } else {
        initCopyButtons();
      }
    </script>
  </body>
  </html>`;
}